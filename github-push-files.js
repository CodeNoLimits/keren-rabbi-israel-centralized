import { Octokit } from '@octokit/rest'
import fs from 'fs/promises'
import path from 'path'

let connectionSettings;

async function getAccessToken() {
  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {
    return connectionSettings.settings.access_token;
  }
  
  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME
  const xReplitToken = process.env.REPL_IDENTITY 
    ? 'repl ' + process.env.REPL_IDENTITY 
    : process.env.WEB_REPL_RENEWAL 
    ? 'depl ' + process.env.WEB_REPL_RENEWAL 
    : null;

  if (!xReplitToken) {
    throw new Error('X_REPLIT_TOKEN not found for repl/depl');
  }

  connectionSettings = await fetch(
    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',
    {
      headers: {
        'Accept': 'application/json',
        'X_REPLIT_TOKEN': xReplitToken
      }
    }
  ).then(res => res.json()).then(data => data.items?.[0]);

  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;

  if (!connectionSettings || !accessToken) {
    throw new Error('GitHub not connected');
  }
  return accessToken;
}

async function getUncachableGitHubClient() {
  const accessToken = await getAccessToken();
  return new Octokit({ auth: accessToken });
}

async function getAllFiles(dir, baseDir = dir) {
  const files = [];
  const entries = await fs.readdir(dir, { withFileTypes: true });
  
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    const relativePath = path.relative(baseDir, fullPath);
    
    // Skip certain directories and files
    if (entry.name.startsWith('.') && entry.name !== '.gitignore') continue;
    if (entry.name === 'node_modules') continue;
    if (entry.name === 'dist') continue;
    if (entry.name === '.cache') continue;
    if (entry.name === '.upm') continue;
    if (entry.name === '.local') continue;
    
    if (entry.isDirectory()) {
      const subFiles = await getAllFiles(fullPath, baseDir);
      files.push(...subFiles);
    } else {
      files.push({
        path: relativePath.replace(/\\/g, '/'), // Ensure forward slashes for GitHub
        fullPath: fullPath
      });
    }
  }
  
  return files;
}

async function pushFilesToGitHub() {
  try {
    console.log('üîó Connecting to GitHub...');
    const octokit = await getUncachableGitHubClient();
    
    const { data: user } = await octokit.rest.users.getAuthenticated();
    console.log(`üë§ Connected as: ${user.login}`);
    
    const owner = user.login;
    const repo = 'haesh-sheli';
    
    // Get all files to upload
    console.log('üìÅ Scanning project files...');
    const files = await getAllFiles('.');
    console.log(`üìÇ Found ${files.length} files to upload`);
    
    // Get the current commit SHA (from the initialized repo)
    const { data: ref } = await octokit.rest.git.getRef({
      owner,
      repo,
      ref: 'heads/main'
    });
    const baseSha = ref.object.sha;
    
    console.log('üì§ Creating tree with all files...');
    
    // Create blobs for all files
    const tree = [];
    let uploaded = 0;
    
    for (const file of files) {
      try {
        const content = await fs.readFile(file.fullPath);
        const isBinary = content.some(byte => byte === 0);
        
        console.log(`‚¨ÜÔ∏è  [${++uploaded}/${files.length}] ${file.path}`);
        
        const { data: blob } = await octokit.rest.git.createBlob({
          owner,
          repo,
          content: isBinary ? content.toString('base64') : content.toString('utf8'),
          encoding: isBinary ? 'base64' : 'utf-8'
        });
        
        tree.push({
          path: file.path,
          mode: '100644',
          type: 'blob',
          sha: blob.sha
        });
      } catch (error) {
        console.error(`‚ùå Error uploading ${file.path}:`, error.message);
      }
    }
    
    // Create the tree
    const { data: newTree } = await octokit.rest.git.createTree({
      owner,
      repo,
      tree,
      base_tree: baseSha
    });
    
    // Create commit
    console.log('üìù Creating commit...');
    const { data: commit } = await octokit.rest.git.createCommit({
      owner,
      repo,
      message: `Complete Haesh Sheli Breslov bookstore website

‚úÖ Modern React frontend with Hebrew RTL support
‚úÖ Node.js/Express backend with PostgreSQL
‚úÖ 30+ authentic Breslov books with real Hebrew images  
‚úÖ Complete subscription system '◊î◊ï◊®◊ê◊™ ◊ß◊ë◊¢' (99‚Ç™/month)
‚úÖ Shopping cart, checkout, and payment integration
‚úÖ Multilingual support (Hebrew, English, French, Spanish, Russian)
‚úÖ Mobile-responsive design with Tailwind CSS
‚úÖ Admin dashboard and user management
‚úÖ Real product data with authentic pricing in shekels
‚úÖ Stripe integration for secure payments
‚úÖ PostgreSQL database with Drizzle ORM

Tech Stack: React, TypeScript, Node.js, Express, PostgreSQL, Stripe, Tailwind CSS`,
      tree: newTree.sha,
      parents: [baseSha]
    });
    
    // Update the reference
    console.log('üîÑ Updating main branch...');
    await octokit.rest.git.updateRef({
      owner,
      repo,
      ref: 'heads/main',
      sha: commit.sha
    });
    
    console.log(`\nüéâ SUCCESS! Project pushed to GitHub successfully!`);
    console.log(`üåê Repository: https://github.com/${owner}/${repo}`);
    console.log(`üìä Files uploaded: ${uploaded}/${files.length}`);
    console.log(`üìù Commit SHA: ${commit.sha}`);
    
    return {
      success: true,
      url: `https://github.com/${owner}/${repo}`,
      filesUploaded: uploaded,
      totalFiles: files.length,
      commitSha: commit.sha
    };
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw error;
  }
}

// Run the script
pushFilesToGitHub()
  .then(result => {
    console.log('\n‚úÖ MISSION ACCOMPLISHED!');
    console.log(`üåê Visit your project: ${result.url}`);
  })
  .catch(error => {
    console.error('\n‚ùå FAILED:', error.message);
    process.exit(1);
  });